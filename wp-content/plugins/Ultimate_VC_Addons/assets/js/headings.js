// JavaScript Document$jh = jQuery.noConflict();$jh(document).ready(function(e) {	ultimate_headings_init();});$jh(window).load(function(e) { //hack for icons	ultimate_headings_init();});$jh(window).resize(function(e){	ultimate_headings_init();});function ultimate_headings_init(){	var fixer = 0; // space between icon/image and line	$jh('.uvc-heading').each(function(){ 		var icon_height, icon_width, line_width;		var wrapper_width = $jh(this).outerWidth(); //get wrapper width		var hline_width = $jh(this).attr('data-hline_width'); //get line width		var icon_type = $jh(this).attr('data-hicon_type'); //get icon type (icon/image)		var align = $jh(this).attr('data-halign');		var spacer = $jh(this).attr('data-hspacer'); //get spacer type		if(spacer == 'line_with_icon')		{			var id = $jh(this).attr('id');			fixer =  parseInt($jh(this).attr('data-hfixer'));			var mid_wrapper_width = (wrapper_width/2); // get mid width of wrapper			$jh(this).find('.dynamic_ultimate_heading_css').remove(); //remove old dynamic css			if(hline_width == 'auto' || hline_width>wrapper_width) //if it is auto or line width is greater than wrapper width				line_width = wrapper_width; //set wrapper width as line width			else				line_width = hline_width;			var mid_line_width = line_width/2; //calculate mid of line width			if(icon_type == 'selector') //if icon type is icon			{				icon_width = $jh(this).find('.aio-icon').outerWidth(); //get outer width of icon				icon_height = $jh(this).find('.aio-icon').outerHeight();			}			else //else icon type is image			{				icon_width = $jh(this).find('.aio-icon-img').outerWidth(); //get width of image				icon_height = $jh(this).find('.aio-icon-img').outerHeight();			}			var mid_icon_width = (icon_width/2); //get mid of icon width			var line_pos = (mid_wrapper_width - mid_icon_width)+icon_width+fixer; //set left and right position of line 			//var cline_width = (mid_line_width - mid_icon_width); //calculate actual line width to be displayed			var cline_width = mid_line_width; //calculate actual line width to be displayed			$jh(this).find('.uvc-heading-spacer').height(icon_height);			if(align == 'center')			{					$jh(this).find('.aio-icon-img').css({'margin':'0 auto'});				//cline_width = cline_width-fixer;				var border_css = '#'+id+' .uvc-heading-spacer.line_with_icon:before{right:'+line_pos+'px;}#'+id+' .uvc-heading-spacer.line_with_icon:after{left:'+line_pos+'px;}';			}			else if(align == 'left')			{				$jh(this).find('.aio-icon-img').css({'float':align});				var border_css = '';				if(line_width != '')				{					border_css = '#'+id+' .uvc-heading-spacer.line_with_icon:before{left:'+(icon_width+fixer)+'px;right:auto;}#'+id+' .uvc-heading-spacer.line_with_icon:after{left:'+(cline_width+icon_width+fixer)+'px;right:auto;}';				}				else				{					border_css = '#'+id+' .uvc-heading-spacer.line_with_icon:before{right:'+(line_pos-icon_width-(fixer*2))+'px;}#'+id+' .uvc-heading-spacer.line_with_icon:after{left:'+(line_pos-fixer)+'px;}';				}			}			else if(align == 'right')			{				$jh(this).find('.aio-icon-img').css({'float':align});				var border_css = '';				if(line_width != '')				{					border_css = '#'+id+' .uvc-heading-spacer.line_with_icon:before{right:'+(icon_width+fixer)+'px;left:auto;}#'+id+' .uvc-heading-spacer.line_with_icon:after{right:'+(cline_width+icon_width+fixer)+'px;left:auto;}';				}				else				{					border_css = '#'+id+' .uvc-heading-spacer.line_with_icon:before{right:'+(line_pos-fixer)+'px;}#'+id+' .uvc-heading-spacer.line_with_icon:after{left:'+(line_pos-icon_width-(fixer*2))+'px;}';				}			}			//get styles			var border_style = $jh(this).attr('data-hborder_style');			var border_color = $jh(this).attr('data-hborder_color');			var border_height = $jh(this).attr('data-hborder_height');			if(hline_width == 'auto')			{				if(align == 'center')					cline_width = Math.floor(cline_width-icon_width+fixer);			}			var hstyle_spacer = '<div class="dynamic_ultimate_heading_css"><style>#'+id+' .uvc-heading-spacer.line_with_icon:before, #'+id+' .uvc-heading-spacer.line_with_icon:after{width:'+(cline_width)+'px;border-style:'+border_style+';border-color:'+border_color+';border-bottom-width:'+border_height+'px;}'+border_css+'</style></div>';			$jh(this).prepend(hstyle_spacer);		}		else if(spacer == 'line_only')		{							if(align == 'right' || align == 'left')			{				$jh(this).find('.uvc-heading-spacer').find('.uvc-headings-line').css({'float':align});			}			else			{				$jh(this).find('.uvc-heading-spacer').find('.uvc-headings-line').css({'margin':'0 auto'});			}		}	});}